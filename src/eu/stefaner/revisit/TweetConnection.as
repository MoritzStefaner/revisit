/*     Copyright 2010, Moritz Stefaner   Licensed under the Apache License, Version 2.0 (the "License");   you may not use this file except in compliance with the License.   You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.    */package eu.stefaner.revisit {	import flash.utils.getDefinitionByName;	import flare.animate.Transitioner;	import flare.util.Maths;	import flare.util.Shapes;	import flare.vis.data.EdgeSprite;	import flare.vis.data.NodeSprite;	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * @author mo	 */	public class TweetConnection extends EdgeSprite {		public var type : String;		public var expanded : Boolean;		private var icon : Sprite;		private var sourceRect : Sprite;		private var targetRect : Sprite;		public var targetHeight : Number;		public var targetAngle : Number;		public function TweetConnection(source : NodeSprite = null, target : NodeSprite = null, type : String = "") {			super(source, target, true);			this.type = type;			if (type == "retweet") {				this.icon = Sprite(new (getDefinitionByName("RTIcon") as Class)());				lineColor = Settings.retweetColor;			} else {				this.icon = Sprite(new (getDefinitionByName("ATIcon") as Class)());				lineColor = Settings.atReplyColor;			}			initSourceAndTargetRect();			addChild(this.icon);			mouseEnabled = false;			mouseChildren = false;			alpha = 0;		}		private function initSourceAndTargetRect() : void {			sourceRect = new Sprite();			targetRect = new Sprite();			addChild(sourceRect);			addChild(targetRect);			sourceRect.graphics.beginFill(lineColor);			sourceRect.graphics.drawRect(0, 0, 3, 3);			targetRect.graphics.beginFill(lineColor);			targetRect.graphics.drawRect(0, 0, 3, 3);		}		override public function render() : void {			graphics.clear();			if (targetRect.alpha > 0) {				renderRect(this, sourceRect.getBounds(this), targetRect.getBounds(this));			}		}		private function renderRect(d : EdgeSprite, b1 : Rectangle, b2 : Rectangle) : void {			d.graphics.lineStyle(0, 0, 0);			// TOP			d.graphics.beginFill(d.lineColor);			d.graphics.moveTo(b1.left, b1.top);			d.graphics.lineTo(b2.left, b2.top);			d.graphics.lineTo(b2.right, b2.top);			d.graphics.lineTo(b1.right, b1.top);			d.graphics.endFill();			// LEFT			d.graphics.beginFill(d.lineColor);			d.graphics.moveTo(b1.left, b1.top);			d.graphics.lineTo(b2.left, b2.top);			d.graphics.lineTo(b2.left, b2.bottom);			d.graphics.lineTo(b1.left, b1.bottom);			d.graphics.endFill();			// RIGHT			d.graphics.beginFill(d.lineColor);			// d.graphics.beginFill(Colors.darker(d.lineColor), d.lineAlpha * alpha);			d.graphics.moveTo(b1.right, b1.top);			d.graphics.lineTo(b2.right, b2.top);			d.graphics.lineTo(b2.right, b2.bottom);			d.graphics.lineTo(b1.right, b1.bottom);			d.graphics.endFill();			// BOTTOM			d.graphics.beginFill(d.lineColor);			// d.graphics.beginFill(Colors.darker(d.lineColor), d.lineAlpha * alpha);			d.graphics.moveTo(b1.left, b1.bottom);			d.graphics.lineTo(b2.left, b2.bottom);			d.graphics.lineTo(b2.right, b2.bottom);			d.graphics.lineTo(b1.right, b1.bottom);			d.graphics.endFill();		}		public function updateSize(t : Transitioner) : Number {			if ((target as TweetSprite).highlighted) {				targetHeight = 20;				this.icon.visible = true;			} else if (expanded) {				targetHeight = 10;				this.icon.visible = false;			} else {				targetHeight = 3;				this.icon.visible = false;			}			targetAngle = (source as TweetSprite).getEndBounds(t).top;			return targetHeight;		}		public function updatePositions(t : Transitioner) : void {			var b : Rectangle;			if (expanded) {				b = (source as TweetSprite).getEndBounds(t);				var xx : Number = t.$(this).x;				var yy : Number = t.$(this).y;				t.$(sourceRect).x = b.left - xx;				t.$(sourceRect).y = b.top - yy;				t.$(sourceRect).width = b.width;				t.$(sourceRect).height = b.height;				var a : Number;				if ((source as TweetSprite).highlighted || (target as TweetSprite).highlighted) {					t.$(this).alpha = a = Settings.tweetConnectionAlpha;				} else {					t.$(this).alpha = a = Settings.tweetConnectionDimmedAlpha;				}				t.$(targetRect).alpha = .75 / a;				t.$(sourceRect).alpha = 0;				t.$(icon).alpha = 1 / a;			} else {				b = (target as TweetSprite).getEndBounds(t);				t.$(sourceRect).x = 0;				t.$(sourceRect).y = 0;				t.$(sourceRect).width = targetHeight;				t.$(sourceRect).height = targetHeight;				t.$(this).alpha = Settings.tweetConnectionCollapsedAlpha;				t.$(targetRect).alpha = 0;				t.$(sourceRect).alpha = 1 / Settings.tweetConnectionCollapsedAlpha;				t.$(icon).alpha = 0;			}			t.$(targetRect).width = targetHeight;			t.$(targetRect).height = targetHeight;		}	}}