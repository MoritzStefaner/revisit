package eu.stefaner.flareextensions.render {	import flare.util.Shapes;	import flare.vis.data.DataSprite;	import flare.vis.data.EdgeSprite;	import flare.vis.data.NodeSprite;	import flare.vis.data.render.ShapeRenderer;	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * @author mo	 */	public class ArcLineRenderer extends ShapeRenderer {		private static var _instance : ArcLineRenderer = new ArcLineRenderer();		public var angle : Number = .33 * Math.PI;		/** Static ShapeRenderer instance. */		public static function get instance() : ArcLineRenderer { 			return _instance; 		}		public function ArcLineRenderer(_angle : Number = 0) {			if(_angle) this.angle = _angle;			super();		}		override public function render(s : DataSprite) : void {			var d : EdgeSprite = s as EdgeSprite;			d.graphics.clear();						var b1 : Rectangle = (d.target as NodeSprite).getBounds(d);			var b2 : Rectangle = (d.source as NodeSprite).getBounds(d);						d.graphics.lineStyle(d.lineWidth, d.lineColor, d.lineAlpha);						var p1 : Point = new Point(b1.left + b1.width * .5, b1.top + b1.height * .5);			var p2 : Point = new Point(b2.left + b2.width * .5, b2.top + b2.height * .5);			ArcLineRenderer.drawArc(d, p1, p2, angle);		}		public static function drawArc(d : Sprite, p1 : Point, p2 : Point, angle : Number = 0) : void {			if(angle == 0) {				angle = .33 * Math.PI;					}			var diffVec : Point = p2.subtract(p1);			var midPoint : Point = p1.clone();			midPoint.offset(diffVec.x * .5, diffVec.y * .5);			var diffLength : Number = Math.sqrt(diffVec.x * diffVec.x + diffVec.y * diffVec.y) * .5;						var beta : Number = angle * .5 + Math.atan2(diffVec.x, diffVec.y);						var directionToCenter : Point = new Point(-Math.cos(beta), Math.sin(beta));			var radius : Number = diffLength / Math.sin(angle * .5); 			directionToCenter.normalize(radius);						var target : Point = p1.add(directionToCenter);			var startAngle : Number = Math.PI * 1.5 + Math.atan2(p2.x - target.x, p2.y - target.y);			var endAngle : Number = startAngle + angle;			/*			d.graphics.lineStyle(1, 0xFFFFFF, 1);			d.graphics.drawCircle(midPoint.x, midPoint.y, 3);			d.graphics.drawCircle(target.x, target.y, 3);			 */			Shapes.drawArc(d.graphics, target.x, target.y, radius, startAngle, endAngle);		}	}}